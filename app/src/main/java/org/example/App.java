/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.List;
import java.util.ArrayList;

public class App {

    // 1. Method to add two integers
    public int add(int a, int b) {
        return a + b;
    }

    // 2. Method to calculate the discount
    public double calculateDiscount(double price, double discountPercentage) {
        return price - (price * discountPercentage / 100);
    }

    // 3. Method to determine if a string is a palindrome
    public boolean isPalindrome(String input) {
        String reverse = new StringBuilder(input).reverse().toString();
        return input.equalsIgnoreCase(reverse);
    }

    // 4. Method to count occurrences of a character in a string
    public int countCharacterOccurrences(String input, char c) {
        int count = 0;
        for (char ch : input.toCharArray()) {
            if (ch == c) count++;
        }
        return count;
    }

    // 5. Method to get the maximum number in a list
    public int getMaxNumber(List<Integer> numbers) {
        if (numbers == null || numbers.isEmpty()) throw new IllegalArgumentException("List is empty");
        return numbers.stream().max(Integer::compareTo).orElseThrow();
    }

    // 6. Method to check if an integer is prime
    public boolean isPrime(int number) {
        if (number <= 1) return false;
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;
        }
        return true;
    }

    // 7. Method to convert Celsius to Fahrenheit
    public double convertCelsiusToFahrenheit(double celsius) {
        return (celsius * 9/5) + 32;
    }

    // 8. Method to generate a list of Fibonacci numbers up to a limit
    public List<Integer> generateFibonacci(int limit) {
        List<Integer> fibonacci = new ArrayList<>();
        int a = 0, b = 1;
        while (a <= limit) {
            fibonacci.add(a);
            int next = a + b;
            a = b;
            b = next;
        }
        return fibonacci;
    }

    // 9. Method to capitalize the first letter of each word in a sentence
    public String capitalizeWords(String sentence) {
        String[] words = sentence.split(" ");
        StringBuilder capitalized = new StringBuilder();
        for (String word : words) {
            capitalized.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1)).append(" ");
        }
        return capitalized.toString().trim();
    }

    // 10. Method to find the factorial of a number
    public int factorial(int number) {
        if (number < 0) throw new IllegalArgumentException("Number must be non-negative");
        int result = 1;
        for (int i = 2; i <= number; i++) {
            result *= i;
        }
        return result;
    }
}

